makeCacheMatrix <- function(x = matrix()) {
    inv <- NULL  # Initialize the inverse as NULL
    
    set <- function(y) {
        x <<- y
        inv <<- NULL  # Reset inverse when new matrix is set
    }
    
    get <- function() x  # Return the matrix
    
    setinverse <- function(inverse) inv <<- inverse  # Store the inverse
    
    getinverse <- function() inv  # Retrieve the stored inverse
    
    list(set = set, get = get,
         setinverse = setinverse,
         getinverse = getinverse)
}

cacheSolve <- function(x, ...) {
    inv <- x$getinverse()
    
    # If inverse is already cached, return it
    if (!is.null(inv)) {
        message("getting cached data")
        return(inv)
    }
    
    # Otherwise, compute the inverse
    data <- x$get()
    inv <- solve(data, ...)
    x$setinverse(inv)  # Cache the inverse
    inv
}
